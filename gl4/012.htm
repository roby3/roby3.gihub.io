<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta http-equiv="Content-Language" content="uk">
<link rel=Edit-Time-Data href=12.files/editdata.mso>
<title>4.3.2. Принципи роботи мостів</title>
</head>
<body lang=Uа>
<h3>4.3.2. Принципи роботи мостів</h3>
<h4><a name=27></a>Алгоритм
роботи прозорого моста</h4>
<p>Прозорі мости непомітні для мережних адаптерів кінцевих вузлів, тому що вони
самостійно будують спеціальну адресну таблицю,
на підставі якої можна вирішити, куди потрібно передавати кадр, що прийшов, у
який-небудь інший сегмент чи ні. Мережеві
адаптери при використанні прозорих мостів працюють точно так само, як й у
випадку їхньої відсутності, тобто не вживають
ніяких додаткових дій, щоб кадр пройшов через
міст. Алгоритм прозорого моста не залежить від
технології локальної мережі, у якій встановлюється міст, тому прозорі мости Ethernet
працюють точно так само, як прозорі мости FDDI.</p>
<p>Прозорий міст будує свою адресну таблицю на підставі пасивного
спостереження за трафіком, що циркулює в підключених до його портів сегментах. При цьому міст
враховує адреси джерел кадрів даних, що надходять
на порти мосту. За адресою джерела кадру міст
робить висновок про приналежність
цього вузла тому або іншому сегменту мережі.</p>
<p>Розглянемо процес автоматичного створення адресної
таблиці моста і її використання на прикладі
простої мережі, поданої
на мал. 4.18.</p>
<table border="0" width="100%" id="table1">
	<tr>
		<td align="center">
<img width=492 height=354
src=images/m18.jpg v:shapes=_x0000_i1029 alt="Мал. 4.18. Принцип роботи прозорого моста"></td>
	</tr>
	<tr>
		<td align="center">Мал. 4.18. Принцип
роботи прозорого моста</td>
	</tr>
</table>
<p>Міст з'єднує два логічних сегменти. Сегмент 1 становлять комп'ютери, підключені
за допомогою одного відрізка коаксіального кабелю до порту 1 моста, а сегмент 2 - комп'ютери, підключені за допомогою іншого відрізка
коаксіального кабелю до порту 2 моста.</p>
<p>Кожен порт моста
працює як кінцевий вузол свого сегмента за одним виключенням
— порт моста не має власної МАС-адреси. Порт моста
працює в так званому <b><i>нерозбірливому</i></b><i> (<b>promisquous</b>) </i>режимі захвата пакетів, коли всі пакети, які поступають на порт,
запам'ятовуються в буферній пам'яті. За допомогою такого режиму міст стежить за
всім трафіком, що
передається у приєднаних
до нього сегментах, і використовує
минаючі через нього пакети для вивчення складу
мережі. Тому що в буфер записуються всі
пакети, то адреса порту мосту не потрібна.</p>
<p>У вихідному стані міст нічого не
знає про ті, комп'ютери з якими Мас-адресами підключені до кожного
з його портів. Тому в цьому випадку міст просто передає будь-який захоплений і буферизований
кадр на всі свої порти за винятком того, від якого цей кадр отриманий. У нашому
прикладі в моста
тільки два порти, тому він передає кадри з порту 1 на порт 2, і навпаки. Відмінність роботи моста
в цьому режимі від повторювача в тому, що він
передає кадр не побітно, а з буферизацієєю. Буферизація
розриває логікові роботи всіх сегментів як
єдиного поділюваного середовища. Коли міст
збирається передати кадр із сегмента на сегмент, наприклад із сегмента 1 на
сегмент 2, він заново намагається одержати
доступ до сегмента 2 як кінцевий вузол за правилами алгоритму доступу, у даному
прикладі - за правилами алгоритму CSMA/CD.</p>
<p>Одночасно з передачею кадру на всі порти міст вивчає адресу джерела кадру й робить новий запис про його приналежність у своїй адресній таблиці, що також називають таблицею фільтрації або
маршрутизації. Наприклад, одержавши на свій <b>порт 1</b> кадр від <b>комп'ютера 1</b>, міст робить перший запис у своїй адресній таблиці: 
<b>Мас-адреса 1</b> - <b>порт 1</b>. Якщо всі чотири комп'ютери даної мережі
проявляють активність і посилають один одному
кадри, то незабаром міст побудує повну адресну таблицю мережі,
що складається з <b>4 записів</b> - по одному запису на
вузол.</p>
<p>Після того як міст пройшов етап навчання, він може працювати більш
раціонально. При одержанні кадру, спрямованого,
наприклад, від <b>комп'ютера 1</b><b>комп'ютеру
3</b>, він переглядає адресну таблицю на предмет збігу її адреси із адресою
призначення <b>3</b>. Оскільки такий запис
є, то міст виконує другий етап аналізу таблиці
— перевіряє, чи перебувають комп'ютери з адресами джерела (у нашому випадку — це адреса 1) і адресою призначення (адреса 3) в одному сегменті. Тому що в нашому
прикладі вони перебувають у різних сегментах,
то міст виконує операцію <b><i>просування</i></b>
(<i><b>forwarding</b></i>) кадру — передає
кадр на інший порт, попередньо одержавши
доступ до іншого сегмента.</p>
<p>Якби виявилося,
що комп'ютери належать одному сегменту, то
кадр просто був би вилучений з буфера й робота
з ним на цьому
б закінчилася. Така операція називається <b><i>фільтрацією</i></b>
(<i><b>filtering</b></i>).</p>
<p>Якщо ж адреса
призначення невідома, то міст передає кадр на всі свої порти, крім порту -
джерела кадру, як і на початковій стадії процесу навчання.</p>
<p>Насправді ми трохи спростили
алгоритм роботи моста. Його процес навчання
ніколи не закінчується. Міст постійно стежить за адресами джерела буферизуючи кадри, так щоб автоматично
пристосовуватися до змін, що відбувають у мережі,
- переміщенням комп'ютерів з одного сегмента мережі
в іншій, появі нових комп'ютерів. З іншого боку, міст не чекає, коли адресна
таблиця заповниться повністю (так це й
неможливо, оскільки заздалегідь не відомо, скільки
комп'ютерів й адрес будуть перебувати в
сегментах моста). Як тільки в таблиці з'являється перша адреса, міст намагається її використати,
перевіряючи збіг з нею адреси призначення всіх
пакетів, які поступають на міст.</p>
<p>Входи адресної таблиці можуть
бути динамічними, тобто створюватися в процесі самонавчання мосту, і статичними, створюваними вручну
адміністратором мережі. Динамічні входи мають строк життя - при створенні або відновленні запису
в адресній таблиці з
нею зв'язується значення часу. Після
закінчення певного тайм-ауту запис
позначається як недійсний, якщо за цей час міст не прийняв жодного кадру з даної адреси в поле
адреси джерела. Це дає можливість автоматично реагувати на переміщення
комп'ютера із сегмента в сегмент - при його відключенні від старого сегмента
запис про його приналежність до нього згодом викреслюється з адресної таблиці. Після
включення цього комп'ютера в роботу в іншому
сегменті його кадри почнуть попадати в буфер моста через інший порт, і в адресній таблиці з'явиться новий запис, що відповідає
поточному стану мережі.</p>
<p>Статичні записи не мають строку життя, що дає адміністраторові
можливість підправляти роботу моста, якщо це
необхідно.</p>
<p>Кадри із широкомовними МАС-адресами передаються мостом на всі його порти, як
і кадри з невідомою адресою призначення. Такий
режим поширення кадрів називається <b><i>затопленням мережі</i></b>
(<i><b>flood</b></i>). Наявність мостів у мережі не перешкоджає поширенню
широкомовних кадрів по всіх сегментах мережі,
зберігаючи її прозорість. Однак це є достоїнством тільки в тому випадку, коли широкомовна
адреса вироблена коректно працюючим вузлом. Однак часто трапляється так, що в
результаті яких-небудь програмних або апаратних збоїв протокол верхнього рівня
або сам мережевий адаптер починають працювати
некоректно й постійно з високою інтенсивністю
генерувати кадри із широкомовною адресою протягом тривалого проміжку часу. Міст у цьому випадку передає ці кадри в усі
сегменти, затоплюючи мережу помилковим трафіком.
Така ситуація називається <b><i>широкомовним
штормом</i></b> (<i><b>broadcast storm</b></i>).</p>
<p>На жаль,
мости не захищають мережі від широкомовного
шторму, у всякому разі, за замовчуванням, як це роблять маршрутизатори.
Максимум, що може зробити адміністратор за допомогою моста
для боротьби із широкомовним штормом - установити для кожного вузла гранично
припустиму інтенсивність генерації кадрів із широкомовною адресою. Але при
цьому потрібно точно знати, яка інтенсивність є
нормальною, а яка - помилковою.
При зміні протоколів ситуація в мережі може
змінитися, і те, що вчора вважалося помилковим, сьогодні може виявитися
нормою. Таким чином, мости мають у своєму розпорядженні досить грубі засоби боротьби із
широкомовним штормом.</p>
<p>На мал. 4.19 показана типова
структура моста. Функції доступу до середовища при прийомі
й передачі кадрів виконують мікросхеми MAC, які ідентичні мікросхемам мережевого адаптера.</p>
<table border="0" width="100%" id="table2">
	<tr>
		<td align="center">
<img width=468 height=427
src=images/m19.jpg v:shapes=_x0000_i1027 alt="Мал. 4.19. Структура моста"></td>
	</tr>
	<tr>
		<td align="center">Мал. 4.19. Структура моста</td>
	</tr>
</table>
<p>На мал. 4.20 показана копія
екрана термінала з адресною таблицею модуля
локального моста концентратора System 3000
компанії SynOptics (сам концентратор уже не випускається, але у свій час він
зіграв роль піонера в становленні багатосегментних
концентраторів Ethernet на кручений парі, причому концентратор мав модуль моста, що міг з'єднувати внутрішні сегменти без
залучення зовнішнього мосту). Термінал
підключений до консольного порту, і інформація на його екрані висвітлена
модулем управління моста.</p>
<p>З поміщеної на екрані адресної
таблиці (Forwarding Table) видно, що мережа
складається із двох сегментів - <b>LAN А</b>
и <b>LAN В</b>. У сегменті <b>LAN А</b> є, принаймні, 3 станції, а в
сегменті <b>LAN В</b> - 2 станції. Чотири адреси, позначені зірочками, є статичними, тобто призначеними адміністратором
вручну. Адреса, позначена &quot;+&quot;, є динамічною адресою з
минулим строком життя.</p>
<p>Таблиця має стовпець &quot;Dispn&quot; – &quot;Розпорядження&quot;,
що говорить мосту,
яку операцію потрібно проробити з кадром, що
має дану адресу призначення. Звичайно при автоматичному
складанні таблиці в цьому полі ставиться
умовна позначка порту призначення, але при ручному
завданні адреси в це поле можна внести нестандартну операцію обробки кадру.
Наприклад, операція &quot;Flood&quot; – &quot;Затоплення&quot; змушує міст поширювати
кадр у широкомовному режимі, незважаючи на те що його адреса
призначення не є широкомовною. Операція &quot;Discard&quot;
- &quot;Відкинути&quot; говорить мосту, що кадр із такою адресою не потрібно
передавати на порт призначення.</p>
<table border="0" width="100%" id="table3">
	<tr>
		<td align="center">
<img width=552 height=214 src=images/m20.jpg  alt="Мал. 4.20. Адресна таблиця моста System 3000 Local Bridge"></td>
	</tr>
	<tr>
		<td align="center">Мал. 4.20. Адресна таблиця моста
System 3000 Local Bridge</td>
	</tr>
</table>
<p>Операції, що задають у поле &quot;Dispn&quot;, є
особливими умовами фільтрації кадрів, що доповнюють стандартні умови поширення кадрів. Такі умови звичайно називають 
<i>користувацькими
фільтрами.</i></p>
<h4><a name=28></a>Мости з
маршрутизацією від джерела</h4>
<p>Мости з
маршрутизацією від джерела застосовуються для з'єднання
кілець Token Ring й FDDI, хоча для цих же
цілей можуть використатися й прозорі мости. <b><i>Маршрутизація
від джерела</i></b> (<b>Source Routing</b>,
<b>SR</b>) заснована на тому, що станція-відправник поміщає в кадр, що
посилає в інше кільце, всю адресну інформацію
про проміжні мости й кільця, які повинен пройти кадр перед тим, як потрапити в кільце, до якого підключений станція-одержувач. Хоча
в назву цього способу входить термін &quot;<i>маршрутизація</i>&quot;,
дійсної маршрутизації в строгому розумінні цього терміна тут немає, тому що
мости й станції як і раніше використають для
передачі кадрів даних тільки інформацію Мас-рівня, а заголовки мережевого
рівня для мостів даного типу як і раніше залишаються
нерозрізненою частиною поля даних кадру.</p>
<p>Розглянемо принципи роботи мостів <b>Source Routing</b> (надалі, <b>SR-мости</b>) на прикладі мережі, зображеної
на мал. 4.21. Мережа складається із трьох кілець, з'єднаних
трьома мостами. Для завдання маршруту кільця
мости мають ідентифікатори. SR-мости не будують
адресну таблицю, а при просуванні кадрів користуються інформацією, яка
міститься у відповідних полях кадру даних.</p>
<table border="0" width="100%" id="table4">
	<tr>
		<td align="center">
<img width=432 height=350 src=images/m21.jpg alt="Мал. 4.21. Мости типу Source Routing"></td>
	</tr>
	<tr>
		<td align="center">Мал. 4.21. Мости типу Source Routing</td>
	</tr>
</table>
<p>При одержанні кожного пакета SR-мосту потрібно тільки переглянути поле маршрутної
інформації (поле <i>Routing Information
Field</i>, RIF, у кадрі Token Ring або FDDI) на предмет наявності в ньому свого ідентифікатора. І якщо він там присутній
і супроводжується ідентифікатором кільця, що підключено до даного мосту,
то в цьому випадку міст копіює кадр, що надійшов, у зазначене
кільце. У протилежному випадку кадр в інше кільце не копіюється. У кожному разі вихідна копія
кадру повертається по вихідному кільцю відправнику-станції-відправникові, і якщо він
був переданий в інше кільце, то біт А (адреса
розпізнана) і біт В (кадр скопійований) поля
статусу кадру встановлюються в 1, щоб повідомити
відправнику-станції-відправникові, що кадр був отриманий станцією призначення
(у цьому випадку переданий мостом в інше кільце).</p>
<p>Тому що маршрутна інформація в
кадрі потрібна не завжди, а тільки для передачі кадру між станціями,
підключеними до різних кілець, то наявність у
кадрі поля RIF позначається установкою в 1 біт
індивідуального/групової адреси (I/G) (при цьому даний біт використається не по призначенню,
тому що адреса джерела завжди індивідуальна).</p>
<p>Поле RIF має керуюче підполе, що складається
із трьох частин.</p>
<ul type=disc>
	<li><b><i>Тип кадру</i></b><i></i>визначає тип поля RIF. Існують різні типи полів RIF, що використаються для знаходження маршруту й для відправлення кадру за відомим маршрутом.</li>
	<li><b><i>Поле максимальної довжини кадру</i></b><i></i>використається мостом для зв'язку кілець, у яких установлене різне значення MTU. За допомогою цього поля міст повідомляє станцію про максимально можливу довжину кадру (тобто мінімальному значенні MTU протягом усього складеного маршруту).</li>
	<li><b><i>Довжина поля RIF</i></b><i></i>необхідна, тому що заздалегідь невідома кількість описів маршруту, що задають ідентифікатори пересічних кілець і мостів.</li>
</ul>
<p>Для роботи алгоритму
маршрутизації від джерела використаються два
додаткових типи кадру - одномаршрутний широкомовний кадр-дослідник SRBF (<i>single-route broadcast frame</i>) і багатомаршрутний широкомовний кадр-дослідник ARBF (<i>all-route broadcast frame</i>).</p>
<p>Всі SR-мости повинні бути зконфігуровані адміністратором вручну, щоб передавати
кадри ARBF на всі порти, крім порту-джерела кадру, а для кадрів SRBF деякі
порти мостів потрібно заблокувати, щоб у мережі
не було петель. У прикладі мережі на мал. 4.21
для виключення петлі адміністратор заблокував
обидва порти <b>моста
3</b> для передачі кадрів SRBF.</p>
<p>Кадр першого типу відправляється
станцією, коли вона, по-перше, визначає, що
станція призначення перебуває в іншому кільці, а
по-друге, їй невідомо, через які мости й кільця
пролягає шлях до цієї станції призначення,
тобто невідомий маршрут до цієї станції. Перша обставина з'ясовується, якщо
кадр, відправлений по кільцю,
повертається в станцію-джерело <i>з </i>невстановленими
ознаками розпізнавання адреси й копіювання. Виходить, жодна зі станцій
вихідного кільця не є
станцією призначення, і кадр слід передавати по деякому складеному маршруті. Відсутність
маршруту до станції призначення в таблиці моста є другою
обставиною, що і викликає відправлення одномаршрутного
дослідника-досліднику-кадру-дослідника SRBF.</p>
<p>В<i></i>кадрі SRBF станція задає довжину поля RIF, рівною нулю. Як і
прозорі мости, SR-мости працюють у режимі &quot;нерозбірливого&quot; захвату, буферизуючи
й аналізуючи всі кадри. При одержанні кадру SRBF SR-міст передає його у вихідному виді
на всі незаблоковані для цього типу кадрів порти. Необхідність у конфігуруванні
топології без петель для кадрів-дослідників SRBF викликана тому, що таким
способом запобігається можливість нескінченного
зациклення цих кадрів.</p>
<p>Зрештою кадр-дослідник SRBF, поширюючись по всіх кільцях
мережі, доходить до станції призначення. У
відповідь станція призначення відправляє багатомаршрутний
широкомовний кадр-дослідник ARBF станції-відправникові. На відміну від кадру
SRBF цей кадр передається мостами через всі порти. При прийомі
такого кадру кожен проміжний міст додає в поле маршрутної інформації RIF новий опис маршруту
(свій ідентифікатор й ідентифікатор сегмента, з
якого отриманий кадр), нарощує довжину поля маршрутної інформації й широкомовно
його поширює.</p>
<p>Для запобігання зациклення кадрів
ARBF мости обробляють їхній у такий спосіб. Перед передачею кадру на
який-небудь сегмент міст перевіряє, чи немає ідентифікатора цього сегмента в
списку маршрутів кадру. Якщо такий сегмент уже був пройдений кадром, то кадр у
даний сегмент не направляється.</p>
<p>Станція-джерело одержує в загальному
випадку кілька кадрів-відповідей, що пройшли
по всіх можливих маршрутах складеної мережі, і вибирає найкращий маршрут (звичайно по
кількості перетинань проміжних мостів). Саме для одержання інформації про всі
можливі маршрути кадр ARBF передається по всіх можливих напрямках.</p>
<p>Потім маршрутна інформація міститься в таблицю маршрутизації станції й використається для відправлення кадрів дані станції
призначення по найкращому маршруті за рахунок
приміщення послідовності номерів мереж і
мостів у заголовку кожного такого кадру.</p>
<p>Мости з
маршрутизацією від джерела мають у порівнянні із прозорими мостам як переваги,
так і недоліки, наведені в табл. 4.1.</p>
<p>Наявність двох можливих
алгоритмів роботи мостів - від джерела й у прозорому режимі - створює труднощі для побудови складних мереж Token Ring. Мости, що працюють від джерела, не
можуть підтримувати сегменти, розраховані на
роботу в прозорому режимі, і навпаки.</p>
<p>До деякого часу ця проблема вирішувалася двома способами. Один спосіб полягав
у використанні у всіх сегментах або тільки маршрутизації від джерела, або
тільки прозорих мостів. Іншим способом була установка
маршрутизаторів. Сьогодні є третє рішення.
Воно засновано на стандарті, що дозволяє об'єднати обидві
технології роботи моста в одному пристрої. Цей стандарт, називаний
SRT (<b><i>Source
Route Transparent</i></b>), дозволяє мосту
працювати в будь-якому режимі. Міст переглядає спеціальні прапори в заголовку
кадрів Token Ring й автоматично визначає, який з алгоритмів потрібно застосувати.</p>
<table border=2 cellspacing=0 cellpadding=0 width="100%" bordercolorlight="#000080" bordercolor="#003366">
	<caption style="text-align: left"><b>Таблиця 4.1. </b>Переваги й недоліки
мостів з маршрутизацією від джерела</caption>
	<tr>
		<th valign=top>
		Переваги</th>
		<th valign=top>
		Недоліки</th>
	</tr>
	<tr>
		<td valign=top>
		Більше раціональні маршрути</td>
		<td valign=top>
		Більше дорогі мережеві адаптери, що приймають участь у маршрутизації</td>
	</tr>
	<tr>
		<td valign=top>
		Простіше й дешевше — не потрібно будувати таблиці фільтрації</td>
		<td valign=top>
		Мережа непрозора — кільця мають номера </td>
	</tr>
	<tr>
		<td valign=top>
		Більш висока швидкість — не потрібно переглядати таблиці фільтрації 
		</td>
		<td valign=top>
		Збільшується трафік за рахунок широкомовних пакетів </td>
	</tr>
</table>
<h4><a name=29></a>Обмеження топології мережі,
побудованої на мостах</h4>
<p>Слабкий захист від широкомовного
шторму - одне з головних обмежень моста, але
не єдине. Іншим серйозним обмеженням їхніх
функціональних можливостей є неможливість
підтримки петлеобразних конфігурацій мережі. Розглянемо
це обмеження на прикладі мережі, зображеній на мал. 4.22. Два
сегменти паралельно з'єднані двома мостами, так що утворилася активна петля.
Нехай нова станція з адресою 10 уперше починає
роботу в даній мережі. Звичайно початок роботи
будь-якої операційної системи супроводжується розсиланням широкомовних кадрів,
у яких станція заявляє про своє існування й одночасно шукає сервери мережі.</p>
<p>На 1-му етапі станція посилає
перший кадр із широкомовною адресою призначення й адресою джерела 10 у свій
сегмент. Кадр попадає як у <b>міст 1</b>, так й у <b>міст 2</b>. В обох мостах нова адреса джерела 10 заноситься в адресну таблицю з позначкою про його приналежності
сегменту 1, тобто створюється новий запис виду:</p>
<table border=1 cellspacing=3 cellpadding=3>
	<tr>
		<th width=91 valign=top>
		МАС-адреса</th>
		<th width=36 valign=top>
		Порт</th>
	</tr>
	<tr>
		<td width=91 valign=top align="center">
		10</td>
		<td width=36 valign=top align="center">
		1</td>
	</tr>
</table>
<p>Тому що адреса
призначення широкомовна, то кожен міст повинен передати кадр на сегмент 2. Ця
передача відбувається по черзі, відповідно до методу випадкового доступу технології
Ethernet. Нехай першим доступ до сегмента 2 одержав міст 1 (етап <i>2 </i>на мал. 4.22). З
появою пакета на сегменті 2 міст 2 приймає його
у свій буфер й обробляє. Він бачить, що адреса
10 уже є в його адресній таблиці, але кадр, що
прийшов, є більш
свіжим, і він стверджує,
що адреса 10 належить <b>сегменту 2</b>, а не <b>сегменту 1</b>. Тому <b>міст 2</b> коректує вміст бази й робить запис про те, що адреса 10 належить 
<b>сегменту 2</b>.</p>
<p>Тепер
адресна таблиця <b>моста
2</b> буде мати вже інший запис про станцію з
адресою 10:</p>
<table border=1 cellpadding=2>
	<tr>
		<th width=97 valign=top>
		МАС-адреса</th>
		<th width=95 valign=top>
		Порт</th>
	</tr>
	<tr>
		<td width=97 valign=top align="center">
		10</td>
		<td width=95 valign=top align="center">
		1 </td>
	</tr>
	<tr>
		<td width=97 valign=top align="center">
		10 </td>
		<td width=95 valign=top align="center">
		2 </td>
	</tr>
</table>
<p>Аналогічно знаходить міст 1, коли міст 2 передає свою копію
кадру на сегмент 2.</p>
<p>Результати наявності петлі
перераховані нижче.</p>
<ul type=disc>
	<li>&quot;Розмноження&quot; кадру, тобто поява декількох його копій (у цьому випадку - двох, але якби сегменти були з'єднані трьома мостами - то трьох і т.д.).</li>
	<li>Нескінченна циркуляція обох копій кадру по петлі в протилежних напрямках, і виходить, засмічення мережі непотрібним трафіком.</li>
	<li>Постійна перебудова мостами своїх адресних таблиць, тому що кадр із адресою джерела 10 буде з'являтися то на одному порту, то на іншому. Щоб виключити всі ці небажані ефекти, мости потрібно застосовувати так, щоб між логічними сегментами не було петель, тобто будувати за допомогою мостів тільки деревоподібні структури, що гарантують наявність тільки одного шляху між будь-якими двома сегментами. Тоді кадри від кожної станції будуть надходити в міст завжди з того самого порту, і міст зможе правильно вирішувати завдання вибору раціонального маршруту в мережі.</li>
</ul>
<p>Обмеження топології
структурованої мережі деревоподібною
структурою випливає із самого принципу побудови адресної таблиці мостом, а тому
точно так само це обмеження діє й на комутатори.</p>
<p>У простих мережах порівняно легко гарантувати існування одного й тільки одного шляху
між двома сегментами. Але коли кількість з'єднань
зростає й мережа стає складної,
то ймовірність ненавмисного утворення петлі виявляється
високою. Крім того, бажано для підвищення надійності мати між мостами резервні зв'язки, які не беруть участь при нормальній роботі
основних зв'язків у передачі інформаційних
пакетів станцій, але при відмові якого-небудь
основного зв'язку утворять нову зв'язну робочу конфігурацію без петель.</p>
<table border="0" width="100%" id="table5">
	<tr>
		<td align="center">
<img width=485 height=432 src=images/m22.jpg alt="Мал. 4.22. Вплив замкнутих маршрутів на роботу мостів"></td>
	</tr>
	<tr>
		<td align="center">Мал.
4.22. Вплив замкнутих маршрутів на роботу мостів</td>
	</tr>
</table>
<p>Тому в складних мережах між логічними сегментами прокладають
надлишкові зв'язки, які утворять петлі, але
для виключення активних петель блокують деякі
порти мостів. Найбільше просто це завдання вирішується вручну, але існують й алгоритми, які
дозволяють вирішувати її автоматично. Найбільш
відомим є стандартний алгоритм покриваючого
дерева (<b><i>Spanning Tree Algorithm</i></b>, <b>STA</b>), що буде детально розглянутий
нижче. Крім того, є фірмові алгоритми, що вирішують те ж завдання, але з
деякими поліпшенням для конкретних моделей комутаторів.</p>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%" id="table1">
  <tr>
    <td width="100%" align="left" colspan="3"><hr color="#2D4C54" size="4"></td>
  </tr>
  <tr>
    <td width="33%" align="left"><a href="011.htm">Попередня</a></td>
    <td width="33%" align="center"><a href="001.htm">Перша</a></td>
    <td width="34%" align="right"><a href="013.htm">Наступна</a></td>
  </tr>
</table>
</body>

</body>
</html>
